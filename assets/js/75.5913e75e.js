(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{562:function(s,t,n){"use strict";n.r(t);var a=n(2),e=Object(a.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[n("strong",[s._v("首先要明白，进程和线程的关系")])]),s._v(" "),n("ul",[n("li",[s._v("进程是根据"),n("code",[s._v("cpu")]),s._v("的处理能力来看， 可以产生多个进程，负责处理不同的任务。")]),s._v(" "),n("li",[s._v("线程是进程的子集，"),n("strong",[s._v("一个进程可以有一个或者多个线程")])]),s._v(" "),n("li",[s._v("在单核 CPU 系统之上我们采用 "),n("code",[s._v("单进程 + 单线程")]),s._v(" 的模式来开发")]),s._v(" "),n("li",[s._v("在多核 CPU 系统之上，可以用过 "),n("code",[s._v("child_process.fork")]),s._v(" 开启多个进程（"),n("code",[s._v("Node.js")]),s._v(" 在"),n("code",[s._v("v0.8")]),s._v(" 版本之后新增了Cluster 来实现多进程架构，多个线程有各自的调用栈（call stack），自己的寄存器环境（register context），自己的线程本地存储（thread-local storage)")])]),s._v(" "),n("p",[n("strong",[s._v("注意：开启多进程不是为了解决高并发，主要是解决了单进程模式下 "),n("code",[s._v("Node.js CPU")]),s._v(" 利用率不足的情况，充分利用多核 CPU 的性能。")])]),s._v(" "),n("ol",[n("li",[s._v("process介绍")])]),s._v(" "),n("p",[s._v("​        "),n("code",[s._v("Node.js")]),s._v(" 中的进程 Process 是一个全局对象，无需 require 直接使用，给我们提供了当前进程中的相关信息")]),s._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[n("p",[s._v("常用的一些命令")]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" process"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("env  环境变量， 例如通过process"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("env"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NODE_ENV")]),s._v(" 可以获取环境项目配置信息。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" process"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("nextTick   其实跟vue的 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("$nextTick")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("方法内部机制有些类似，就是当前面所有的时间执行完成之后。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v(" process"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("pid   当前进程的id\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.")]),s._v(" process"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ppid   当前进程对应的父进程的id\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.")]),s._v(" process"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("cwd")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   获取当前进程的工作目录\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.")]),s._v(" process"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("platform 获取当前进行运行的操作系统平台\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.")]),s._v(" process"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("uptime")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  当前进程已运行时间， 例如pm2 守护进程的uptime值\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.")]),s._v(" 进程事件 \n    process"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("on")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"uncaughtException"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" cb"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 捕获异信息\n    process"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("on")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"exit"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" cb"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 进程退出监听\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("9.")]),s._v(" 三个标准流\n    process"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("stdout 标准输出\n    process"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("stdin  标准输入\n    process"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("stderr 标准错误输出\n    \n    \n    \n    \n总结： \n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" js是单线程的，但是作为宿主环境的nodejs并不是\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 由于单线程的缘故，一些复杂的，小号cpu的资源的一些任务不要交给nodejs进行处理，当你的业务需要大量计算，视频编码解码等cpu密集型的任务，可以使用其他的后端语言进行\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v(" node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("js 和 nginx 都是事件驱动方式，避免了多线程的线程创建，线程上下文切换的开销，如果你的业务大多数是基于"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("I")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("O")]),s._v("操作，那么你可以选择nodejs来开发。\n\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])])])])])}),[],!1,null,null,null);t.default=e.exports}}]);