(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{404:function(t,s,a){"use strict";a.r(s);var n=a(33),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"手写new的过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手写new的过程"}},[t._v("#")]),t._v(" 手写new的过程")]),t._v(" "),a("p",[t._v("new 运算符"),a("strong",[t._v("创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例。 ——（来自于MDN）")])]),t._v(" "),a("ol",[a("li",[t._v("new 创建的实例有以下两个目的")])]),t._v(" "),a("ul",[a("li",[t._v("访问到构造函数里的属性")]),t._v(" "),a("li",[t._v("访问到原型的属性")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[t._v("模拟实现过程  也就是 new Foo(...)  的过程")]),t._v(" "),a("ul",[a("li",[t._v("一个继承自Foo.prototype的新对象被创建；就是说，我们需要一个新的对象，然后把这个新对象的原型指向构造函数的原型")]),t._v(" "),a("li",[t._v("使用指定的参数调用构造函数Foo, 并将this绑定到新创建的对象。new  Foo等同于  new Foo(),  也就是说没有指定参数列表，Foo不带任何参数调用的情况")]),t._v(" "),a("li",[t._v("由构造函数返回的对象，也就是new 表达式的结果，如果构造函数没有返回一个对象则使用步骤1创建的对象")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 逻辑过程   要明白 new 最后返回的是一个对象，这样你才能以对象的方式访问其中的属性")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v(" 先创建一个对象  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v(" 将要"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" 的外面的构造函数 传进来， 然后获取到这个构造函数\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),t._v(" 将 新对象的prototype 指向 获取到的构造函数的prototype上\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.")]),t._v(" 最后将构造函数的"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v(" 指向 新建的对象\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.")]),t._v(" 将对象"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n\n\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第一版")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一个空对象 这个其实就是实例对象")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获得构造函数，argumengts中除去第一个参数  因为第一个 参数是要实例的函数  就是拿到构造函数")]),t._v("\n    Con "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shift")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 链接到原型，obj可以访问到构造函数中的属性  把实例对象的原型指向构造函数的原型")]),t._v("\n    obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Con")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 绑定this  实现继承， 最后将构造函数的this  指向obj")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Con")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" obj\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("构造函数返回值有如下三种情况：")])])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("情况1: 构造函数，内部有return方法，返回了一个对象， 只能访问到对象中的属性，访问不到构造函数中的属性")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Car")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("color"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("color "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" color"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 但是这里有return 一个对象, 这样导致我们拿到的 访问的时候，访问不到color属性，只能访问到name")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" name\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("情况2：构造函数， 内部有return 方法，返回的不是对象类型,  那么就只能访问到构造函数中的属性")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Car")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("color"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("color "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" color"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fajkf"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("情况3： 构造函数，没有return, 返回undefined,  只能访问到"),a("strong",[t._v("构造函数中的属")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Car")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("color"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("color "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" color"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[t._v("最终版")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v('  ```javascript\n  // 讲最终版之前 说一下Object.create()\n  //1 生成一个新对象， 这个对象很干净，没有prototype 是一个完全的空对象\n  // null 没有原型，所以 对象a 也就没有原型\n   var a =  Object.create(null); \n  \n  \n  // 2 根据obj对象创建一个新对象， 会直接指向obj的原型上\n    var obj ={\n        name: "123",\n        age: 123\n    }\n    var b = Object.create(obj); // 对象b的原型直接指向了obj.原型\n    b.prototype  === obj.prototype  // true\n  \n  \n  \n  // 最终版 就用到Object.create();\n  \n  function create(){\n      \n      // 1. 先获取到传进来的构造函数\n      Con = [].shift.call(arguments); // 数组的shift方法 截取, 原数组第一个值去除，改变原数组\n    \n      // 2. 创建一个对象，并且将这个对象的原型指向，构造函数的原型\n      var obj = Object.create(Con.prototype);\\\n      \n      // 3. 将构造函数的this 指向obj 对象 完成实例的创建, 并且，传入剩余的参数\n      // 此时的arguments 已经是没有了第一个 参数的参数集合,arguments 是个数组，所以用apply\n      // 需要判断，构造函数的返回，因为有三种返回情况\n      var ret = Con.apply(obj, arguments);\n      \n      //4. 判断构造函数返回的是不是一个对象，如果不是，直接把obj返回，只需要拿到prototype的属性就可以了， 如果是一个对象，那么就返回ret ,既可以访问到构造函数的属性，也可访问到prototype的属性\n      return ret instanceof Objcet ? ret : obj;\n      \n  }\n     \n  ```\n')])])])])}),[],!1,null,null,null);s.default=e.exports}}]);