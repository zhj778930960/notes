(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{403:function(t,a,e){"use strict";e.r(a);var r=e(33),_=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"http状态码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http状态码"}},[t._v("#")]),t._v(" HTTP状态码")]),t._v(" "),e("ol",[e("li",[t._v("1xx  :  这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于 HTTP/1.0 协议中没有定义任何 1xx 状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送 1xx 响应。")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("100 Continue")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://baike.baidu.com/item/%E5%AE%A2%E6%88%B7%E7%AB%AF",target:"_blank",rel:"noopener noreferrer"}},[t._v("客户端"),e("OutboundLink")],1),t._v("应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。")])]),t._v(" "),e("li",[e("h3",{attrs:{id:"_101-switching-protocols"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_101-switching-protocols"}},[t._v("#")]),t._v(" 101 Switching Protocols")]),t._v(" "),e("p",[t._v("服务器已经理解了客户端的请求，并将通过Upgrade 消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade 消息头中定义的那些协议。")]),t._v(" "),e("p",[t._v("只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP 版本比旧版本更有优势，或者切换到一个实时且同步的协议以传送利用此类特性的资源。")])]),t._v(" "),e("li",[e("h3",{attrs:{id:"_102-processing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_102-processing"}},[t._v("#")]),t._v(" 102 Processing")]),t._v(" "),e("p",[t._v("由WebDAV（RFC 2518）扩展的状态码，代表处理将被继续执行")])])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("2xx: 这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。")])]),t._v(" "),e("ul",[e("li",[e("h3",{attrs:{id:"_200-ok"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_200-ok"}},[t._v("#")]),t._v(" 200 OK")]),t._v(" "),e("p",[t._v("请求已成功，请求所希望的响应头或数据体将随此响应返回。出现此状态码是表示正常状态。")])]),t._v(" "),e("li",[e("h3",{attrs:{id:"_201-created"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_201-created"}},[t._v("#")]),t._v(" 201 Created")]),t._v(" "),e("p",[t._v("请求已经被实现，而且有一个新的资源已经依据请求的需要而建立，且其 URI 已经随Location 头信息返回。假如需要的资源无法及时建立的话，应当返回 '202 Accepted'。")])]),t._v(" "),e("li",[e("h3",{attrs:{id:"_202-accepted"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_202-accepted"}},[t._v("#")]),t._v(" 202 Accepted")]),t._v(" "),e("p",[t._v("服务器已接受请求，但尚未处理。正如它可能被拒绝一样，最终该请求可能会也可能不会被执行。在异步操作的场合下，没有比发送这个状态码更方便的做法了。")])])]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("3xx: 这类状态码代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的 Location 域中指明。")])]),t._v(" "),e("p",[t._v("当且仅当后续的请求所使用的方法是 GET 或者 HEAD 时，用户浏览器才可以在没有用户介入的情况下自动提交所需要的后续请求。客户端应当自动监测无限循环重定向（例如：A->A，或者A->B->C->A），因为这会导致服务器和客户端大量不必要的资源消耗。按照 HTTP/1.0 版规范的建议，浏览器不应自动访问超过5次的重定向。")]),t._v(" "),e("ul",[e("li",[e("h3",{attrs:{id:"_300-multiple-choices"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_300-multiple-choices"}},[t._v("#")]),t._v(" 300 Multiple Choices")]),t._v(" "),e("p",[t._v("被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。")])]),t._v(" "),e("li",[e("h3",{attrs:{id:"_301-moved-permanently"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_301-moved-permanently"}},[t._v("#")]),t._v(" 301 Moved Permanently")]),t._v(" "),e("p",[t._v("被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。")])]),t._v(" "),e("li",[e("h3",{attrs:{id:"_302-move-temporarily"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_302-move-temporarily"}},[t._v("#")]),t._v(" 302 Move Temporarily")]),t._v(" "),e("p",[t._v("请求的资源临时从不同的 URI响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。")])]),t._v(" "),e("li",[e("h3",{attrs:{id:"_303-see-other"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_303-see-other"}},[t._v("#")]),t._v(" 303 See Other")]),t._v(" "),e("p",[t._v("对应当前请求的响应可以在另一个 URL 上被找到，而且客户端应当采用 GET 的方式访问那个资源。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的 URI 不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。")])]),t._v(" "),e("li",[e("h3",{attrs:{id:"_304-not-modified"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_304-not-modified"}},[t._v("#")]),t._v(" 304 Not Modified")]),t._v(" "),e("p",[t._v("如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。")])])]),t._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[e("p",[t._v("4XX:这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。除非响应的是一个 HEAD 请求，否则服务器就应该返回一个解释当前错误状况的实体，以及这是临时的还是永久性的状况。这些状态码适用于任何请求方法。浏览器应当向用户显示任何包含在此类错误响应中的实体内容。")]),t._v(" "),e("ul",[e("li",[e("h3",{attrs:{id:"_400-bad-request"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_400-bad-request"}},[t._v("#")]),t._v(" 400 Bad Request")]),t._v(" "),e("p",[t._v("1、语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。")]),t._v(" "),e("p",[t._v("2、请求参数有误。")])]),t._v(" "),e("li",[e("h3",{attrs:{id:"_401-unauthorized"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_401-unauthorized"}},[t._v("#")]),t._v(" 401 Unauthorized")]),t._v(" "),e("p",[t._v("当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate 信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了 Authorization 证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。参见RFC 2617。")]),t._v(" "),e("h3",{attrs:{id:"_402-payment-required"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_402-payment-required"}},[t._v("#")]),t._v(" 402 Payment Required")]),t._v(" "),e("p",[t._v("该状态码是为了将来可能的需求而预留的。")]),t._v(" "),e("h3",{attrs:{id:"_403-forbidden"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_403-forbidden"}},[t._v("#")]),t._v(" 403 Forbidden")]),t._v(" "),e("p",[t._v("服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个 HEAD 请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。")]),t._v(" "),e("h3",{attrs:{id:"_404-not-found"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_404-not-found"}},[t._v("#")]),t._v(" 404 Not Found")]),t._v(" "),e("p",[t._v("请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。出现这个错误的最有可能的原因是服务器端没有这个页面。")]),t._v(" "),e("h3",{attrs:{id:"_405-method-not-allowed"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_405-method-not-allowed"}},[t._v("#")]),t._v(" 405 Method Not Allowed")]),t._v(" "),e("p",[t._v("请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow 头信息用以表示出当前资源能够接受的请求方法的列表。")])])])]),t._v(" "),e("li",[e("p",[t._v("5xx: 这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。除非这是一个HEAD 请求，否则服务器应当包含一个解释当前错误状态以及这个状况是临时的还是永久的解释信息实体。浏览器应当向用户展示任何在当前响应中被包含的实体。")]),t._v(" "),e("ul",[e("li",[e("h3",{attrs:{id:"_500-internal-server-error"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_500-internal-server-error"}},[t._v("#")]),t._v(" 500 Internal Server Error")]),t._v(" "),e("p",[t._v("服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器端的源代码出现错误时出现。")]),t._v(" "),e("h3",{attrs:{id:"_501-not-implemented"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_501-not-implemented"}},[t._v("#")]),t._v(" 501 Not Implemented")]),t._v(" "),e("p",[t._v("服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。")]),t._v(" "),e("h3",{attrs:{id:"_502-bad-gateway"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_502-bad-gateway"}},[t._v("#")]),t._v(" 502 Bad Gateway")]),t._v(" "),e("p",[t._v("作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。")]),t._v(" "),e("h3",{attrs:{id:"_503-service-unavailable"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_503-service-unavailable"}},[t._v("#")]),t._v(" 503 Service Unavailable")]),t._v(" "),e("p",[t._v("由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是临时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个 Retry-After 头用以标明这个延迟时间。如果没有给出这个 Retry-After 信息，那么客户端应当以处理500响应的方式处理它。")]),t._v(" "),e("p",[t._v("注意：503状态码的存在并不意味着服务器在过载的时候必须使用它。某些服务器只不过是希望拒绝客户端的连接。")]),t._v(" "),e("h3",{attrs:{id:"_504-gateway-timeout"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_504-gateway-timeout"}},[t._v("#")]),t._v(" 504 Gateway Timeout")]),t._v(" "),e("p",[t._v("作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。")]),t._v(" "),e("p",[t._v("注意：某些代理服务器在DNS查询超时时会返回400或者500错误")]),t._v(" "),e("h3",{attrs:{id:"_505-http-version-not-supported"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_505-http-version-not-supported"}},[t._v("#")]),t._v(" 505 HTTP Version Not Supported")]),t._v(" "),e("p",[t._v("服务器不支持，或者拒绝支持在请求中使用的 HTTP 版本。这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。")]),t._v(" "),e("h3",{attrs:{id:"_506-variant-also-negotiates"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_506-variant-also-negotiates"}},[t._v("#")]),t._v(" 506 Variant Also Negotiates")]),t._v(" "),e("p",[t._v("由《透明内容协商协议》（RFC 2295）扩展，代表服务器存在内部配置错误：被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点。")])])])])])])}),[],!1,null,null,null);a.default=_.exports}}]);